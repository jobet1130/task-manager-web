name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      branch_type:
        description: 'Type of branch to create'
        required: true
        default: 'feature'
        type: choice
        options:
        - feature
        - hotfix
        - release
      branch_name:
        description: 'Branch name (without prefix)'
        required: true
        type: string
      base_branch:
        description: 'Base branch to create from'
        required: false
        default: 'auto'
        type: choice
        options:
        - auto
        - master
        - develop

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/task-manager

jobs:
  create-branch:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
    
    - name: Determine base branch
      id: base-branch
      run: |
        BRANCH_TYPE="${{ github.event.inputs.branch_type }}"
        BASE_BRANCH="${{ github.event.inputs.base_branch }}"
        
        if [ "$BASE_BRANCH" = "auto" ]; then
          case $BRANCH_TYPE in
            "feature")
              BASE_BRANCH="develop"
              ;;
            "hotfix")
              BASE_BRANCH="master"
              ;;
            "release")
              BASE_BRANCH="develop"
              ;;
            *)
              BASE_BRANCH="develop"
              ;;
          esac
        fi
        
        echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPUT
        echo "Using base branch: $BASE_BRANCH"
    
    - name: Create and push branch
      run: |
        BRANCH_TYPE="${{ github.event.inputs.branch_type }}"
        BRANCH_NAME="${{ github.event.inputs.branch_name }}"
        BASE_BRANCH="${{ steps.base-branch.outputs.base_branch }}"
        
        # Create full branch name with prefix
        FULL_BRANCH_NAME="${BRANCH_TYPE}/${BRANCH_NAME}"
        
        echo "Creating branch: $FULL_BRANCH_NAME from $BASE_BRANCH"
        
        # Checkout base branch
        git checkout $BASE_BRANCH
        git pull origin $BASE_BRANCH
        
        # Create new branch
        git checkout -b $FULL_BRANCH_NAME
        
        # Push new branch
        git push origin $FULL_BRANCH_NAME
        
        echo "âœ… Successfully created branch: $FULL_BRANCH_NAME"
        echo "ðŸ”— Branch URL: https://github.com/${{ github.repository }}/tree/$FULL_BRANCH_NAME"

  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Make scripts executable
      run: |
        chmod +x scripts/*.sh
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run type checking
      run: npx tsc --noEmit
    
    - name: Setup test database
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
      run: |
        # Install PostgreSQL client
        sudo apt-get update
        sudo apt-get install -y postgresql-client
        # Run database initialization
        PGPASSWORD=testpass psql -h localhost -U testuser -d testdb -f init.sql
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        NODE_ENV: test
      run: |
        # Add test script when available
        echo "Tests will be added here"
        # npm test
    
    - name: Build application
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
      run: npm run build

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/task-manager:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/task-manager:${{ github.sha }}
          ${{ secrets.DOCKERHUB_USERNAME }}/task-manager:${{ github.ref_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      env:
        DEPLOY_HOST: ${{ secrets.STAGING_HOST }}
        DEPLOY_USER: ${{ secrets.STAGING_USER }}
        DEPLOY_KEY: ${{ secrets.STAGING_SSH_KEY }}
        DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        POSTGRES_HOST: ${{ secrets.STAGING_POSTGRES_HOST }}
        POSTGRES_PORT: ${{ secrets.STAGING_POSTGRES_PORT }}
        POSTGRES_DB: ${{ secrets.STAGING_POSTGRES_DB }}
        POSTGRES_USER: ${{ secrets.STAGING_POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.STAGING_POSTGRES_PASSWORD }}
      run: |
        echo "Deploying to staging environment"
        # Add staging deployment script here
        # This could involve SSH to staging server and docker-compose up

  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      env:
        DEPLOY_HOST: ${{ secrets.PRODUCTION_HOST }}
        DEPLOY_USER: ${{ secrets.PRODUCTION_USER }}
        DEPLOY_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}
        DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        POSTGRES_HOST: ${{ secrets.PRODUCTION_POSTGRES_HOST }}
        POSTGRES_PORT: ${{ secrets.PRODUCTION_POSTGRES_PORT }}
        POSTGRES_DB: ${{ secrets.PRODUCTION_POSTGRES_DB }}
        POSTGRES_USER: ${{ secrets.PRODUCTION_POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.PRODUCTION_POSTGRES_PASSWORD }}
      run: |
        echo "Deploying to production environment"
        # Add production deployment script here
        # This could involve SSH to production server and docker-compose up

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push'
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Log in to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.IMAGE_NAME }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '0'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        sarif_file: 'trivy-results.sarif'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}